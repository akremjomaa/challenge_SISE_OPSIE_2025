# visualization/ip_analysis.py

import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
from config import CLEANED_FILE_PATH

# ğŸ“Œ Charger les donnÃ©es et les mettre en cache
@st.cache_data
def load_data():
    """Charge et met en cache les logs Firewall depuis un fichier Parquet."""
    return pd.read_parquet(CLEANED_FILE_PATH, engine="pyarrow")

def show_ip_analysis():
    st.title("ğŸ“¡ Analyse Interactive des IP Sources")

    # ğŸ“Œ Charger les donnÃ©es une seule fois grÃ¢ce au cache
    df = load_data()

    # ğŸ“Œ VÃ©rification des colonnes
    required_columns = {"source_ip", "destination_ip", "action"}
    if not required_columns.issubset(df.columns):
        st.error("Les colonnes requises ne sont pas prÃ©sentes dans le jeu de donnÃ©es.")
        return

    # ğŸ“Œ Grouper par IP source et compter les occurrences des destinations contactÃ©es et le nombre de flux "DENY"
    df_grouped = df.groupby(["source_ip"]).agg(
        num_destinations=pd.NamedAgg(column="destination_ip", aggfunc="nunique"),
        num_deny=pd.NamedAgg(column="action", aggfunc=lambda x: (x == "DENY").sum())
    ).reset_index()

    # ğŸ“Œ Trier les donnÃ©es par nombre d'IP destinations contactÃ©es
    df_grouped = df_grouped.sort_values(by="num_destinations", ascending=True).reset_index(drop=True)

    # ğŸ“Œ SÃ©lecteur interactif pour choisir une IP
    ip_selected = st.selectbox("ğŸ“Œ SÃ©lectionnez une IP Source :", df_grouped["source_ip"])

    # ğŸ“Œ Extraire les informations de l'IP sÃ©lectionnÃ©e
    selected_ip = df_grouped[df_grouped["source_ip"] == ip_selected].iloc[0]

    # ğŸ“Œ Affichage des informations sÃ©lectionnÃ©es
    st.write(f"ğŸ”¹ **Adresse IP Source** : {selected_ip['source_ip']}")
    st.write(f"ğŸ“Š **Nombre d'IP destination contactÃ©es** : {selected_ip['num_destinations']}")
    st.write(f"ğŸš« **Nombre de flux rejetÃ©s (DENY)** : {selected_ip['num_deny']}")

    # ğŸ“Œ CrÃ©ation du graphique interactif avec Plotly
    fig = px.scatter(
        df_grouped,
        x=df_grouped.index,
        y="num_destinations",
        color="num_deny",
        color_continuous_scale="reds",
        title="ğŸ“¡ IP Sources vs Nombre d'IP Destinations ContactÃ©es",
        labels={"num_destinations": "Nombre dâ€™IP Destinations", "index": "Index des IP Sources"},
        hover_data=["source_ip", "num_deny"]
    )

    # ğŸ“Œ Ajout dâ€™une ligne verte pour lâ€™IP sÃ©lectionnÃ©e
    selected_index = df_grouped[df_grouped["source_ip"] == ip_selected].index[0]
    fig.add_vline(x=selected_index, line_color="green")

    # ğŸ“Œ Affichage du graphique interactif
    st.plotly_chart(fig, use_container_width=True)

if __name__ == "__main__":
    show_ip_analysis()
